{"version":3,"sources":["static_data.js","GuessTheMovie_App_Home.js","App.js","index.js"],"names":["movies","name","hint","GuessTheMovie_App_Home","props","state","currentIndex","movieName","toggleButton","attempts","txtLetterGuess","txtMovieGuess","letterGuessIsCorrect","movieGuessIsCorrect","correctlyGuessedLetters","btnAnswer_btnNext","bind","btnLetterGuess","btnMovieGuess","this","setState","getAttempts","charac","includes","toLowerCase","consonants","Array","from","map","each","isVowel","Math","floor","filter","letter","length","Container","Row","style","justifyContent","marginBottom","id","className","sm","Col","Accordion","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","InputGroup","FormControl","placeholder","aria-label","maxLength","value","disabled","onChange","e","target","display","alignItems","icon","faCheckCircle","faTimesCircle","width","Append","onClick","marginTop","OverlayTrigger","trigger","placement","overlay","Popover","Title","Content","src","height","objectFit","React","Component","App","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f1853fe0.chunk.js","sourcesContent":["export let movies = [\n  {\n    name: \"Lord Of The Rings\",\n    hint:\n      \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\"\n  },\n  {\n    name: \"Extremely Loud And Incredibly Close\",\n    hint:\n      \"A nine-year-old amateur inventor, Francophile, and pacifist searches New York City for the lock that matches a mysterious key left behind by his father, who died in the World Trade Center on September 11, 2001.\"\n  },\n  {\n    name: \"Gravity\",\n    hint:\n      \"Two astronauts work together to survive after an accident leaves them stranded in space.\"\n  },\n  {\n    name: \"Kuch Kuch Hota Hai\",\n    hint:\n      \"During their college years, Anjali was in love with her best-friend Rahul, but he had eyes only for Tina. Years later, Rahul and the now-deceased Tina's eight-year-old daughter attempts to reunite her father and Anjali.\"\n  },\n  {\n    name: \"The Silence of The Lambs\",\n    hint:\n      \"A young F.B.I. cadet must receive the help of an incarcerated and manipulative cannibal killer to help catch another serial killer, a madman who skins his victims.\"\n  },\n  {\n    name: \"The Wolf of Wall Street\",\n    hint:\n      \"Based on the true story of Jordan Belfort, from his rise to a wealthy stock-broker living the high life to his fall involving crime, corruption and the federal government.\"\n  }\n];\n","import React from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  Button,\n  Accordion,\n  InputGroup,\n  FormControl,\n  OverlayTrigger,\n  Popover\n} from \"react-bootstrap\";\nimport \"./GuessTheMovie_App_Home.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheckCircle,\n  faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { movies } from \"./static_data\";\n\n/**\n * GUESS THE LETTERS - btnLetterGuess\n * GUESS THE MOVIE - btnMovieGuess\n * I GIVE UP/NEXT - btnAnswer/btnNext\n */\n\nexport class GuessTheMovie_App_Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      currentIndex: 0,\n      movieName: \"\",\n      toggleButton: \"answer\", //toggle it between \"answer\" and \"next\",\n      attempts: 0,\n      txtLetterGuess: \"\",\n      txtMovieGuess: \"\",\n      letterGuessIsCorrect: null,\n      movieGuessIsCorrect: null,\n      correctlyGuessedLetters: []\n    };\n\n    this.btnAnswer_btnNext = this.btnAnswer_btnNext.bind(this);\n    this.btnLetterGuess = this.btnLetterGuess.bind(this);\n    this.btnMovieGuess = this.btnMovieGuess.bind(this);\n  }\n\n  componentDidMount() {\n    //make API request to fetch a list of movies\n\n    // axios\n    //   .get(\n    //     \"https://api.themoviedb.org/3/movie/popular?api_key=b08986608f2b838f8dc89c7c21bee0ea&language=en-US&page=1\"\n    //   )\n    //   .then((response) => {\n    //     let temp = response.data.results.map((each) => {\n    //       return {\n    //         name: each.title,\n    //         hint: each.overview,\n    //       };\n    //     });\n    //     this.setState({\n    //       movies: temp,\n    //       attempts: this.getAttempts(temp[0].name),\n    //     });\n    //   })\n    //   .catch((error) => console.log(error));\n\n    this.setState({\n      movies: movies,\n      attempts: this.getAttempts(movies[0].name)\n    });\n  }\n\n  isVowel(charac) {\n    if ([\"a\", \"e\", \"i\", \"o\", \"u\"].includes(charac.toLowerCase())) return true;\n    return false;\n  }\n\n  getAttempts(movieName) {\n    let consonants = 0;\n    Array.from(movieName).map((each) => {\n      if (!this.isVowel(each) && each !== \" \") consonants++;\n    });\n    return Math.floor(consonants / 2);\n  }\n\n  btnLetterGuess() {\n    /**\n     * Restrict user to type only one letter [DONE]\n     * when guess is clicked\n     *  1. show icon correct or wrong based on whether guessed letter belongs to movie name or not[DONE]\n     *  2. decrease no. of attempts[DONE]\n     *  3. emanate correct or wrong guess sound [optional]\n     *  4. if guess is correct reveal that letter in the movie name string[DONE]\n     *  5. when attempts are zero, disable guess button[DONE]\n     */\n    let {\n      movies,\n      currentIndex,\n      txtLetterGuess,\n      attempts,\n      correctlyGuessedLetters\n    } = this.state;\n    let movieName = Array.from(movies[currentIndex].name.toLowerCase());\n    movieName = movieName.filter((each) => !this.isVowel(each));\n    let letter = txtLetterGuess.toLowerCase();\n\n    if (movieName.includes(letter)) {\n      this.setState({\n        letterGuessIsCorrect: true,\n        correctlyGuessedLetters: [...correctlyGuessedLetters, letter]\n      });\n    } else if (txtLetterGuess === \"\")\n      this.setState({ letterGuessIsCorrect: null });\n    else {\n      this.setState({\n        letterGuessIsCorrect: false\n      });\n    }\n  }\n\n  btnMovieGuess() {\n    /**\n     * If movie is correct, then\n     *  1. show correct icon else wrong icon\n     *  2. show complete movie name\n     *  3. show next button\n     */\n    let {\n      movies,\n      currentIndex,\n      txtMovieGuess,\n      movieGuessIsCorrect,\n      movieName\n    } = this.state;\n    if (\n      movies[currentIndex].name.toLowerCase() === txtMovieGuess.toLowerCase()\n    ) {\n      this.setState({\n        movieGuessIsCorrect: true,\n        movieName: movies[currentIndex].name,\n        toggleButton: \"next\"\n      });\n    } else {\n      this.setState({\n        movieGuessIsCorrect: false\n      });\n    }\n  }\n\n  btnAnswer_btnNext() {\n    let { movies, currentIndex, toggleButton } = this.state;\n\n    if (toggleButton === \"answer\") {\n      //when \"I GIVE UP\" button is clicked\n      this.setState({\n        movieName: movies[currentIndex].name,\n        toggleButton: \"next\",\n        letterGuessIsCorrect: null,\n        movieGuessIsCorrect: null,\n        correctlyGuessedLetters: [],\n        attempts: this.getAttempts(movies[currentIndex].name)\n      });\n    } else {\n      //when \"NEXT\" button is clicked\n      this.setState({\n        movieName: \"\",\n        txtLetterGuess: \"\",\n        txtMovieGuess: \"\",\n        movieGuessIsCorrect: null,\n        letterGuessIsCorrect: null,\n        correctlyGuessedLetters: [],\n        currentIndex: (currentIndex + 1) % movies.length,\n        toggleButton: \"answer\",\n        attempts: this.getAttempts(\n          movies[(currentIndex + 1) % movies.length].name\n        )\n      });\n    }\n  }\n\n  render() {\n    let {\n      movieName,\n      toggleButton,\n      currentIndex,\n      movies,\n      letterGuessIsCorrect,\n      movieGuessIsCorrect,\n      attempts,\n      txtLetterGuess,\n      txtMovieGuess,\n      correctlyGuessedLetters\n    } = this.state;\n    return (\n      <Container>\n        <Row style={{ justifyContent: \"center\", marginBottom: \"50px\" }}>\n          <h1>GUESS THE MOVIE</h1>\n        </Row>\n        <Row id=\"movie_text\">\n          {movieName ? (\n            <span>{movieName}</span>\n          ) : (\n            movies.length > 0 &&\n            Array.from(movies[currentIndex].name).map((each) => {\n              if (this.isVowel(each))\n                return <span className=\"vowel\">{each}</span>;\n              else if (each === \" \")\n                return <span className=\"space\">{each}</span>;\n              else if (\n                correctlyGuessedLetters.length > 0 &&\n                correctlyGuessedLetters.includes(each.toLowerCase())\n              )\n                return <span>{each}</span>;\n              else return <span>_</span>;\n            })\n          )}\n        </Row>\n        <Row sm={7} style={{ justifyContent: \"center\" }}>\n          <Col sm={6}>\n            <Accordion>\n              <Card>\n                <Card.Header>\n                  <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                    GUESS THE LETTERS\n                  </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey=\"0\">\n                  <Card.Body>\n                    <div>\n                      <div>\n                        <span>Attempts: </span>\n                        <span>{this.state.attempts}</span>\n                      </div>\n                      <Container>\n                        <Row>\n                          <Col>\n                            <InputGroup>\n                              <FormControl\n                                placeholder=\"Your Guess\"\n                                aria-label=\"Your Guess\"\n                                maxLength=\"1\"\n                                value={txtLetterGuess}\n                                disabled={attempts === 0 ? true : false}\n                                onChange={(e) => {\n                                  this.setState(\n                                    {\n                                      txtLetterGuess: e.target.value,\n                                      attempts:\n                                        e.target.value === \"\"\n                                          ? attempts\n                                          : attempts - 1,\n                                      letterGuessIsCorrect:\n                                        e.target.value === \"\"\n                                          ? null\n                                          : letterGuessIsCorrect\n                                    },\n                                    () => {\n                                      this.btnLetterGuess();\n                                    }\n                                  );\n                                }}\n                              />\n                            </InputGroup>\n                          </Col>\n                          <div\n                            style={{ display: \"flex\", alignItems: \"center\" }}\n                          >\n                            {letterGuessIsCorrect === null ? (\n                              \"\"\n                            ) : letterGuessIsCorrect === true ? (\n                              <FontAwesomeIcon icon={faCheckCircle} />\n                            ) : (\n                              <FontAwesomeIcon icon={faTimesCircle} />\n                            )}\n                          </div>\n                        </Row>\n                      </Container>\n                    </div>\n                  </Card.Body>\n                </Accordion.Collapse>\n              </Card>\n              <Card>\n                <Card.Header>\n                  <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                    GUESS THE MOVIE\n                  </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey=\"1\">\n                  <Card.Body>\n                    <Container>\n                      <Row>\n                        <Col>\n                          <InputGroup>\n                            <FormControl\n                              placeholder=\"Your Guess\"\n                              aria-label=\"Your Guess\"\n                              value={txtMovieGuess}\n                              style={{ width: \"100%\" }}\n                              onChange={(e) =>\n                                this.setState({ txtMovieGuess: e.target.value })\n                              }\n                            />\n                            <InputGroup.Append\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                alignItems: \"center\"\n                              }}\n                            >\n                              <Button\n                                variant=\"outline-secondary\"\n                                onClick={this.btnMovieGuess}\n                                style={{ marginTop: \"10px\" }}\n                              >\n                                GUESS\n                              </Button>\n                            </InputGroup.Append>\n                          </InputGroup>\n                        </Col>\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                          {movieGuessIsCorrect === null ? (\n                            \"\"\n                          ) : movieGuessIsCorrect === true ? (\n                            <FontAwesomeIcon icon={faCheckCircle} />\n                          ) : (\n                            <FontAwesomeIcon icon={faTimesCircle} />\n                          )}\n                        </div>\n                      </Row>\n                    </Container>\n                  </Card.Body>\n                </Accordion.Collapse>\n              </Card>\n            </Accordion>\n            <Button\n              style={{ marginTop: \"10px\" }}\n              onClick={this.btnAnswer_btnNext}\n            >\n              {toggleButton === \"next\" ? \"NEXT\" : \"I GIVE UP :(\"}\n            </Button>\n          </Col>\n\n          <OverlayTrigger\n            trigger=\"click\"\n            placement=\"right\"\n            overlay={\n              <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">Hint</Popover.Title>\n                <Popover.Content>\n                  {movies.length > 0 && movies[currentIndex].hint}\n                </Popover.Content>\n              </Popover>\n            }\n          >\n            <Button variant=\"success\">\n              <img\n                src=\"https://jooinn.com/images/light-bulb-ideas.jpg\"\n                style={{ height: \"40px\", objectFit: \"contain\" }}\n              />\n            </Button>\n          </OverlayTrigger>\n        </Row>\n      </Container>\n    );\n  }\n}\n\n/**\n *\n * Functionalities\n * 1. Iterate over the list of movies stored locally and show vowels only of each movie one by one[DONE]\n * 2. Code functionalities for letter guess, movie guess and [I give up][DONE] buttons\n * 3. Show hints\n * 4. Fetch data from an API\n * 5. Calculate attempts for each movie name as (no. of consonants)/2 [DONE]\n */\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\nimport { GuessTheMovie_App_Home } from \"./GuessTheMovie_App_Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GuessTheMovie_App_Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}